//#;; DO NOT EDIT THIS FILE
/*ENCRYPT_ME*/
////////////////////////////////////////////////////////////////////////////////
//# Copyright (c) 2018 Secantec
//# No Permission to modify and distribute this program
//# even if this copyright message remains unaltered.
//#
//# Author: Secantec 27 April, 2018
//# $Id: $//#
//# Revision History
//#       MM      17  April, 2018    Initial release
//#
////////////////////////////////////////////////////////////////////////////////

// /bin/rm -rf *simv* *csrc* ; perl vpp.pl -perl sntc_berlekamp.1.sv > sntc_berlekamp.1.vpp.sv ; vcs -sverilog -R -debug_all sntc_berlekamp.1.vpp.sv -l sntc_berlekamp.1.vpp.sv.log

 /*ENCRYPT_ME*/

/* verilator lint_off DECLFILENAME */
//`default_nettype none
//`timescale 1 ns / 1 ps

module  sntc_ldpc_syndrome_tb #(
// NR_2_0_4/sntc_LDPCparam.sv
parameter MM   = 'h 000a8 ,
// parameter MM =  'h  000a8  , 
parameter NN   = 'h 000d0 ,
// parameter NN =  'h  000d0  , 
parameter cmax = 'h 00017 ,
// parameter cmax =  'h  00017  , 
parameter rmax = 'h 0000a ,
// parameter rmax =  'h  0000a  , 
// 208
// 168
parameter SUM_NN         = $clog2(NN+1), // 8 : nn_width
parameter SUM_MM         = $clog2(MM+1), // 8 : mm_width
parameter LEN            = MM,
parameter SUM_NN_WDTH    = $clog2(SUM_NN+2),
parameter SUM_MM_WDTH    = $clog2(SUM_MM+2),
`include  "NR_2_0_4/sntc_LDPC_dec_param.sv"
parameter MAX_SUM_WDTH_LONG = MAX_SUM_WDTH +1,
parameter SUM_LEN= $clog2(NN+1)+1,
parameter HAM_LEN= 16

) (

input wire clk_tb,
input wire rstn_tb
);

`ifdef ENCRYPT
`endif


bit passed =0;
bit [31:0] [150/*int*/:0]  ER;
bit [31:0] [150/*int*/:0]  BG;
bit [31:0] [150/*int*/:0]  KL;
bit [31:0] [150/*int*/:0]    A;
bit [31:0] [150/*int*/:0]    Z;
int par_bits_sent     ;
int par_bits_count    ;
real rate_0 ;
string NR_BG_0;
real rate_1 ;
string NR_BG_1;
real rate_2 ;
string NR_BG_2;
real rate_3 ;
string NR_BG_3;
real rate_4 ;
string NR_BG_4;
real rate_5 ;
string NR_BG_5;
real rate_6 ;
string NR_BG_6;
real rate_7 ;
string NR_BG_7;
real rate_8 ;
string NR_BG_8;
real rate_9 ;
string NR_BG_9;
real rate_10 ;
string NR_BG_10;
real rate_11 ;
string NR_BG_11;
real rate_12 ;
string NR_BG_12;
real rate_13 ;
string NR_BG_13;
real rate_14 ;
string NR_BG_14;
real rate_15 ;
string NR_BG_15;
real rate_16 ;
string NR_BG_16;
real rate_17 ;
string NR_BG_17;
real rate_18 ;
string NR_BG_18;
real rate_19 ;
string NR_BG_19;
real rate_20 ;
string NR_BG_20;
real rate_21 ;
string NR_BG_21;
real rate_22 ;
string NR_BG_22;
real rate_23 ;
string NR_BG_23;
real rate_24 ;
string NR_BG_24;
real rate_25 ;
string NR_BG_25;
real rate_26 ;
string NR_BG_26;
real rate_27 ;
string NR_BG_27;
real rate_28 ;
string NR_BG_28;
real rate_29 ;
string NR_BG_29;
real rate_30 ;
string NR_BG_30;
real rate_31 ;
string NR_BG_31;
real rate_32 ;
string NR_BG_32;
real rate_33 ;
string NR_BG_33;
real rate_34 ;
string NR_BG_34;
real rate_35 ;
string NR_BG_35;
real rate_36 ;
string NR_BG_36;
real rate_37 ;
string NR_BG_37;
real rate_38 ;
string NR_BG_38;
real rate_39 ;
string NR_BG_39;
real rate_40 ;
string NR_BG_40;
real rate_41 ;
string NR_BG_41;
real rate_42 ;
string NR_BG_42;
real rate_43 ;
string NR_BG_43;
real rate_44 ;
string NR_BG_44;
real rate_45 ;
string NR_BG_45;
real rate_46 ;
string NR_BG_46;
real rate_47 ;
string NR_BG_47;
real rate_48 ;
string NR_BG_48;
real rate_49 ;
string NR_BG_49;
real rate_50 ;
string NR_BG_50;
real rate_51 ;
string NR_BG_51;
real rate_52 ;
string NR_BG_52;
real rate_53 ;
string NR_BG_53;
real rate_54 ;
string NR_BG_54;
real rate_55 ;
string NR_BG_55;
real rate_56 ;
string NR_BG_56;
real rate_57 ;
string NR_BG_57;
real rate_58 ;
string NR_BG_58;
real rate_59 ;
string NR_BG_59;
real rate_60 ;
string NR_BG_60;
real rate_61 ;
string NR_BG_61;
real rate_62 ;
string NR_BG_62;
real rate_63 ;
string NR_BG_63;
real rate_64 ;
string NR_BG_64;
real rate_65 ;
string NR_BG_65;
real rate_66 ;
string NR_BG_66;
real rate_67 ;
string NR_BG_67;
real rate_68 ;
string NR_BG_68;
real rate_69 ;
string NR_BG_69;
real rate_70 ;
string NR_BG_70;
real rate_71 ;
string NR_BG_71;
real rate_72 ;
string NR_BG_72;
real rate_73 ;
string NR_BG_73;
real rate_74 ;
string NR_BG_74;
real rate_75 ;
string NR_BG_75;
real rate_76 ;
string NR_BG_76;
real rate_77 ;
string NR_BG_77;
real rate_78 ;
string NR_BG_78;
real rate_79 ;
string NR_BG_79;
real rate_80 ;
string NR_BG_80;
real rate_81 ;
string NR_BG_81;
real rate_82 ;
string NR_BG_82;
real rate_83 ;
string NR_BG_83;
real rate_84 ;
string NR_BG_84;
real rate_85 ;
string NR_BG_85;
real rate_86 ;
string NR_BG_86;
real rate_87 ;
string NR_BG_87;
real rate_88 ;
string NR_BG_88;
real rate_89 ;
string NR_BG_89;
real rate_90 ;
string NR_BG_90;
real rate_91 ;
string NR_BG_91;
real rate_92 ;
string NR_BG_92;
real rate_93 ;
string NR_BG_93;
real rate_94 ;
string NR_BG_94;
real rate_95 ;
string NR_BG_95;
real rate_96 ;
string NR_BG_96;
real rate_97 ;
string NR_BG_97;
real rate_98 ;
string NR_BG_98;
real rate_99 ;
string NR_BG_99;
real rate_100 ;
string NR_BG_100;
real rate_101 ;
string NR_BG_101;
real rate_102 ;
string NR_BG_102;
real rate_103 ;
string NR_BG_103;
real rate_104 ;
string NR_BG_104;
real rate_105 ;
string NR_BG_105;
real rate_106 ;
string NR_BG_106;
real rate_107 ;
string NR_BG_107;
real rate_108 ;
string NR_BG_108;
real rate_109 ;
string NR_BG_109;
real rate_110 ;
string NR_BG_110;
real rate_111 ;
string NR_BG_111;
real rate_112 ;
string NR_BG_112;
real rate_113 ;
string NR_BG_113;
real rate_114 ;
string NR_BG_114;
real rate_115 ;
string NR_BG_115;
real rate_116 ;
string NR_BG_116;
real rate_117 ;
string NR_BG_117;
real rate_118 ;
string NR_BG_118;
real rate_119 ;
string NR_BG_119;
real rate_120 ;
string NR_BG_120;
real rate_121 ;
string NR_BG_121;
real rate_122 ;
string NR_BG_122;
real rate_123 ;
string NR_BG_123;
real rate_124 ;
string NR_BG_124;
real rate_125 ;
string NR_BG_125;
real rate_126 ;
string NR_BG_126;
real rate_127 ;
string NR_BG_127;
real rate_128 ;
string NR_BG_128;
real rate_129 ;
string NR_BG_129;
real rate_130 ;
string NR_BG_130;
real rate_131 ;
string NR_BG_131;
real rate_132 ;
string NR_BG_132;
real rate_133 ;
string NR_BG_133;
real rate_134 ;
string NR_BG_134;
real rate_135 ;
string NR_BG_135;
real rate_136 ;
string NR_BG_136;
real rate_137 ;
string NR_BG_137;
real rate_138 ;
string NR_BG_138;
real rate_139 ;
string NR_BG_139;
real rate_140 ;
string NR_BG_140;
real rate_141 ;
string NR_BG_141;
real rate_142 ;
string NR_BG_142;
real rate_143 ;
string NR_BG_143;
real rate_144 ;
string NR_BG_144;
real rate_145 ;
string NR_BG_145;
real rate_146 ;
string NR_BG_146;
real rate_147 ;
string NR_BG_147;
real rate_148 ;
string NR_BG_148;
real rate_149 ;
string NR_BG_149;






// -1 : shortened
// NR_2_0_4.alist : ALIST name


// spl : NR 2 0 4.alist
// NR_BG: 2

// NR_Z: $NR_Z





reg  [NN-1:0]                 tmp_bit;
reg  [NN-1:0] [1:0]           q0;
wire [MM-1:0]                 syndrome;
reg  [MM-1:0]                 exp_syn;
wire [SUM_LEN-1:0]            HamDist_sum_mm;
reg  [HAM_LEN-1:0]            HamDist_loop;
reg  [HAM_LEN-1:0]            HamDist_cntr;
reg  [HAM_LEN-1:0]            HamDist_loop_max;
reg  [HAM_LEN-1:0]            HamDist_loop_percentage;
wire [1:0]                    converged;
wire                          converged_valid;
reg                           start_int;
wire                          valid_int;
reg                           clk;
reg                           rstn;
int                           clk_cntr;
reg                           clr;
reg                           start;
wire                          valid;
wire [31:0]                   percent_probability_int;

reg  [HAM_LEN-1:0]            HamDist_iir1;
reg  [HAM_LEN-1:0]            HamDist_iir2;
reg  [HAM_LEN-1:0]            HamDist_iir3;
reg                           c_test =0;

always_comb begin
          HamDist_iir1 = 85;
          HamDist_iir2 = 15;
          HamDist_iir3 = 5;

end

wire valid_cword;
wire valid_cword_dec;
wire [NN-1:0] y_nr;
reg [NN-MM-1:0] y_nr_in;
reg [NN-1:0] y_nr_w_err;

sntc_ldpc_syndrome_wrapper i_sntc_ldpc_syndrome_wrapper
(


                                  .y_nr_in                (tmp_bit),
                                  .syn_nr                 (syndrome),
/* verilator lint_off UNUSED */
                                  .clr                    (clr),
/* verilator lint_on UNUSED */
                                  .valid_cword            (valid_cword),
                                  .rstn                   (rstn),
                                  .clk                    (clk)
);





`ifdef SIMULATION
 int num_pkts =1;
initial
begin
  clk = 0;
  clk_cntr = 1;
  forever
  begin
    clk = ~clk;
    if (clk) clk_cntr = clk_cntr + 1;
    //if (clk) if ((clk_cntr % 1000) === 0) $display("LDPC_TB:clk_cntr:%05d %t", clk_cntr, $time);
    if (clk) $display("LDPC_TB:clk_cntr:%05d %t", clk_cntr, $time);
    #5;
  end
end
initial
begin
  rstn = 0;
  clr = 0;
  repeat (10) @ (posedge clk);
  rstn = 1;
end


always_comb HamDist_loop_max        =  10;
always_comb HamDist_loop_percentage =  110;

initial
begin
KL[00]=8448;ER[ 0]= 9396;A[ 0]=8832;NR_BG_0="NR_1_1_192";
KL[01]=8448;ER[ 1]=10566;A[ 1]=8832;NR_BG_1="NR_1_1_192";
KL[02]=8448;ER[ 2]= 9392;A[ 2]=8832;NR_BG_2="NR_1_1_192";
KL[03]=8448;ER[ 3]=12368;A[ 3]=8832;NR_BG_3="NR_1_1_192";
KL[04]=8448;ER[ 4]=14460;A[ 4]=8832;NR_BG_4="NR_1_1_192";
KL[05]=8448;ER[ 5]=20768;A[ 5]=8832;NR_BG_5="NR_1_1_192";
KL[06]=3840;ER[ 6]=19200;A[ 6]=4032;NR_BG_6="NR_2_1_96" ;
KL[07]=3840;ER[ 7]=19200;A[ 7]=4032;NR_BG_7="NR_2_1_96" ;

KL[ 8]=8448;ER[ 8]=14556;A[ 8]=8832;NR_BG_8="NR_1_1_192";
KL[ 9]=8448;ER[ 9]=21048;A[ 9]=8832;NR_BG_9="NR_1_1_192";
KL[10]=8448;ER[10]=25344;A[10]=8832;NR_BG_10="NR_1_1_192";
KL[11]=3840;ER[11]=19200;A[11]=4032;NR_BG_11="NR_2_1_96" ;


KL[12]= 501;ER[12]= 864 ;A[12]= 546;NR_BG_12="NR_2_6_13" ;
KL[13]= 231;ER[13]= 576 ;A[13]= 252;NR_BG_13="NR_2_1_6"  ;
KL[14]=  57;ER[14]= 288 ;A[14]=  84;NR_BG_14="NR_2_0_2"  ;
KL[15]=  28;ER[15]= 140 ;A[15]=  84;NR_BG_15="NR_2_0_2"  ;
KL[16]=1003;ER[16]=1728 ;A[16]=1096;NR_BG_16="NR_2_6_26" ;
KL[17]= 462;ER[17]=1152 ;A[17]= 504;NR_BG_17="NR_2_1_12" ;
KL[18]= 115;ER[18]= 576 ;A[18]= 126;NR_BG_18="NR_2_1_3"  ;
KL[19]=  57;ER[19]= 286 ;A[19]=  84;NR_BG_19="NR_2_0_2"  ;


KL[20]=8448;ER[20]=25344;A[20]=8832;NR_BG_20="NR_1_1_192";

KL[21]=8448;ER[21]=14556;A[21]=8832;NR_BG_21="NR_1_1_192";
KL[22]=4162;ER[22]=10368;A[22]=4416;NR_BG_22="NR_1_1_96" ;
KL[23]=1036;ER[23]= 5180;A[23]=1096;NR_BG_23="NR_2_6_26" ;
KL[24]= 518;ER[24]= 2590;A[24]= 546;NR_BG_24="NR_2_6_13" ;

KL[25]=4326;ER[25]=4162 ;A[25]=4784;NR_BG_25="NR_1_6_104";

KL[26]=1036;ER[26]=5180 ;A[26]=1092;NR_BG_26="NR_2_6_26" ;
KL[27]=518 ;ER[27]=2590 ;A[27]= 546;NR_BG_27="NR_2_6_13" ;

end
initial
begin

  static int timeoutfec;
  static int ret;
  static int decoder_only;
  static int count_msg;
  static int error_count = 0;

  start                          <= 1'b0;
  decoder_only = 0;

  repeat (1) @ (posedge rstn);
  repeat (10) @ (posedge clk);

  if (c_test) begin


              q0  [0] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [1] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [2] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [3] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [4] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [5] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [6] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [7] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [8] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [9] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [10] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [11] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [12] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [13] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [14] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [15] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [16] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [17] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [18] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [19] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [20] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [21] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [22] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [23] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [24] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [25] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [26] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [27] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [28] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [29] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [30] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [31] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [32] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [33] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [34] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [35] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [36] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [37] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [38] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [39] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [40] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [41] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [42] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [43] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [44] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [45] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [46] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [47] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [48] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [49] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [50] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [51] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [52] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [53] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [54] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [55] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [56] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [57] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [58] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [59] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [60] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [61] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [62] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [63] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [64] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [65] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [66] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [67] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [68] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [69] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [70] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [71] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [72] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [73] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [74] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [75] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [76] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [77] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [78] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [79] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [80] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [81] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [82] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [83] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [84] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [85] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [86] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [87] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [88] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [89] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [90] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [91] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [92] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [93] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [94] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [95] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [96] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [97] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [98] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [99] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [100] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [101] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [102] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [103] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [104] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [105] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [106] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [107] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [108] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [109] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [110] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [111] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [112] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [113] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [114] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [115] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [116] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [117] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [118] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [119] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [120] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [121] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [122] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [123] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [124] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [125] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [126] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [127] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [128] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [129] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [130] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [131] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [132] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [133] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [134] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [135] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [136] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [137] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [138] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [139] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [140] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [141] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [142] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [143] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [144] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [145] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [146] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [147] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [148] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [149] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [150] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [151] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [152] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [153] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [154] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [155] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [156] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [157] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [158] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [159] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [160] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [161] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [162] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [163] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [164] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [165] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [166] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [167] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [168] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [169] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [170] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [171] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [172] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [173] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [174] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [175] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [176] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [177] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [178] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [179] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [180] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [181] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [182] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [183] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [184] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [185] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [186] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [187] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [188] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [189] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [190] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [191] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [192] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [193] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [194] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [195] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [196] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [197] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [198] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [199] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [200] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [201] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [202] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [203] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [204] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [205] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11
              q0  [206] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                 // value of 0 means 1 in BPSK which is 2'b01
              q0  [207] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                 // value of 1 means -1 in BPSK which is 2'b11

         exp_syn [0] <= 1'b1;
         exp_syn [1] <= 1'b1;
         exp_syn [2] <= 1'b1;
         exp_syn [3] <= 1'b1;
         exp_syn [4] <= 1'b1;
         exp_syn [5] <= 1'b1;
         exp_syn [6] <= 1'b1;
         exp_syn [7] <= 1'b1;
         exp_syn [8] <= 1'b1;
         exp_syn [9] <= 1'b1;
         exp_syn [10] <= 1'b1;
         exp_syn [11] <= 1'b1;
         exp_syn [12] <= 1'b1;
         exp_syn [13] <= 1'b1;
         exp_syn [14] <= 1'b1;
         exp_syn [15] <= 1'b1;
         exp_syn [16] <= 1'b1;
         exp_syn [17] <= 1'b1;
         exp_syn [18] <= 1'b1;
         exp_syn [19] <= 1'b1;
         exp_syn [20] <= 1'b1;
         exp_syn [21] <= 1'b1;
         exp_syn [22] <= 1'b1;
         exp_syn [23] <= 1'b1;
         exp_syn [24] <= 1'b1;
         exp_syn [25] <= 1'b1;
         exp_syn [26] <= 1'b1;
         exp_syn [27] <= 1'b1;
         exp_syn [28] <= 1'b1;
         exp_syn [29] <= 1'b1;
         exp_syn [30] <= 1'b1;
         exp_syn [31] <= 1'b1;
         exp_syn [32] <= 1'b1;
         exp_syn [33] <= 1'b1;
         exp_syn [34] <= 1'b1;
         exp_syn [35] <= 1'b1;
         exp_syn [36] <= 1'b1;
         exp_syn [37] <= 1'b1;
         exp_syn [38] <= 1'b1;
         exp_syn [39] <= 1'b1;
         exp_syn [40] <= 1'b1;
         exp_syn [41] <= 1'b1;
         exp_syn [42] <= 1'b1;
         exp_syn [43] <= 1'b1;
         exp_syn [44] <= 1'b1;
         exp_syn [45] <= 1'b1;
         exp_syn [46] <= 1'b1;
         exp_syn [47] <= 1'b1;
         exp_syn [48] <= 1'b1;
         exp_syn [49] <= 1'b1;
         exp_syn [50] <= 1'b1;
         exp_syn [51] <= 1'b1;
         exp_syn [52] <= 1'b1;
         exp_syn [53] <= 1'b1;
         exp_syn [54] <= 1'b1;
         exp_syn [55] <= 1'b1;
         exp_syn [56] <= 1'b1;
         exp_syn [57] <= 1'b1;
         exp_syn [58] <= 1'b1;
         exp_syn [59] <= 1'b1;
         exp_syn [60] <= 1'b1;
         exp_syn [61] <= 1'b1;
         exp_syn [62] <= 1'b1;
         exp_syn [63] <= 1'b1;
         exp_syn [64] <= 1'b1;
         exp_syn [65] <= 1'b1;
         exp_syn [66] <= 1'b1;
         exp_syn [67] <= 1'b1;
         exp_syn [68] <= 1'b1;
         exp_syn [69] <= 1'b1;
         exp_syn [70] <= 1'b1;
         exp_syn [71] <= 1'b1;
         exp_syn [72] <= 1'b1;
         exp_syn [73] <= 1'b1;
         exp_syn [74] <= 1'b1;
         exp_syn [75] <= 1'b1;
         exp_syn [76] <= 1'b1;
         exp_syn [77] <= 1'b1;
         exp_syn [78] <= 1'b1;
         exp_syn [79] <= 1'b1;
         exp_syn [80] <= 1'b1;
         exp_syn [81] <= 1'b1;
         exp_syn [82] <= 1'b1;
         exp_syn [83] <= 1'b1;
         exp_syn [84] <= 1'b1;
         exp_syn [85] <= 1'b1;
         exp_syn [86] <= 1'b1;
         exp_syn [87] <= 1'b1;
         exp_syn [88] <= 1'b1;
         exp_syn [89] <= 1'b1;
         exp_syn [90] <= 1'b1;
         exp_syn [91] <= 1'b1;
         exp_syn [92] <= 1'b1;
         exp_syn [93] <= 1'b1;
         exp_syn [94] <= 1'b1;
         exp_syn [95] <= 1'b1;
         exp_syn [96] <= 1'b1;
         exp_syn [97] <= 1'b1;
         exp_syn [98] <= 1'b1;
         exp_syn [99] <= 1'b1;
         exp_syn [100] <= 1'b1;
         exp_syn [101] <= 1'b1;
         exp_syn [102] <= 1'b1;
         exp_syn [103] <= 1'b1;
         exp_syn [104] <= 1'b1;
         exp_syn [105] <= 1'b1;
         exp_syn [106] <= 1'b1;
         exp_syn [107] <= 1'b1;
         exp_syn [108] <= 1'b1;
         exp_syn [109] <= 1'b1;
         exp_syn [110] <= 1'b1;
         exp_syn [111] <= 1'b1;
         exp_syn [112] <= 1'b1;
         exp_syn [113] <= 1'b1;
         exp_syn [114] <= 1'b1;
         exp_syn [115] <= 1'b1;
         exp_syn [116] <= 1'b1;
         exp_syn [117] <= 1'b1;
         exp_syn [118] <= 1'b1;
         exp_syn [119] <= 1'b1;
         exp_syn [120] <= 1'b1;
         exp_syn [121] <= 1'b1;
         exp_syn [122] <= 1'b1;
         exp_syn [123] <= 1'b1;
         exp_syn [124] <= 1'b1;
         exp_syn [125] <= 1'b1;
         exp_syn [126] <= 1'b1;
         exp_syn [127] <= 1'b1;
         exp_syn [128] <= 1'b1;
         exp_syn [129] <= 1'b1;
         exp_syn [130] <= 1'b1;
         exp_syn [131] <= 1'b1;
         exp_syn [132] <= 1'b1;
         exp_syn [133] <= 1'b1;
         exp_syn [134] <= 1'b1;
         exp_syn [135] <= 1'b1;
         exp_syn [136] <= 1'b1;
         exp_syn [137] <= 1'b1;
         exp_syn [138] <= 1'b1;
         exp_syn [139] <= 1'b1;
         exp_syn [140] <= 1'b1;
         exp_syn [141] <= 1'b1;
         exp_syn [142] <= 1'b1;
         exp_syn [143] <= 1'b1;
         exp_syn [144] <= 1'b1;
         exp_syn [145] <= 1'b1;
         exp_syn [146] <= 1'b1;
         exp_syn [147] <= 1'b1;
         exp_syn [148] <= 1'b1;
         exp_syn [149] <= 1'b1;
         exp_syn [150] <= 1'b1;
         exp_syn [151] <= 1'b1;
         exp_syn [152] <= 1'b1;
         exp_syn [153] <= 1'b1;
         exp_syn [154] <= 1'b1;
         exp_syn [155] <= 1'b1;
         exp_syn [156] <= 1'b1;
         exp_syn [157] <= 1'b1;
         exp_syn [158] <= 1'b1;
         exp_syn [159] <= 1'b1;
         exp_syn [160] <= 1'b1;
         exp_syn [161] <= 1'b1;
         exp_syn [162] <= 1'b1;
         exp_syn [163] <= 1'b1;
         exp_syn [164] <= 1'b1;
         exp_syn [165] <= 1'b1;
         exp_syn [166] <= 1'b1;
         exp_syn [167] <= 1'b1;

  end else begin //c_test==0
     bit syny;
         y_nr_in[0] = 1; //data
         y_nr_in[1] = 0; //data
         y_nr_in[2] = 1; //data
         y_nr_in[3] = 1; //data
         y_nr_in[4] = 1; //data
         y_nr_in[5] = 1; //data
         y_nr_in[6] = 0; //data
         y_nr_in[7] = 0; //data
         y_nr_in[8] = 1; //data
         y_nr_in[9] = 1; //data
         y_nr_in[10] = 0; //data
         y_nr_in[11] = 1; //data
         y_nr_in[12] = 0; //data
         y_nr_in[13] = 1; //data
         y_nr_in[14] = 1; //data
         y_nr_in[15] = 0; //data
         y_nr_in[16] = 0; //data
         y_nr_in[17] = 0; //data
         y_nr_in[18] = 0; //data
         y_nr_in[19] = 0; //data
         y_nr_in[20] = 1; //data
         y_nr_in[21] = 0; //data
         y_nr_in[22] = 1; //data
         y_nr_in[23] = 1; //data
         y_nr_in[24] = 0; //data
         y_nr_in[25] = 0; //data
         y_nr_in[26] = 0; //data
         y_nr_in[27] = 1; //data
         y_nr_in[28] = 1; //data
         y_nr_in[29] = 1; //data
         y_nr_in[30] = 1; //data
         y_nr_in[31] = 0; //data
         y_nr_in[32] = 0; //data
         y_nr_in[33] = 0; //data
         y_nr_in[34] = 1; //data
         y_nr_in[35] = 1; //data
         y_nr_in[36] = 1; //data
         y_nr_in[37] = 0; //data
         y_nr_in[38] = 1; //data
         y_nr_in[39] = 0; //data
     repeat (1) @ (posedge clk);
     for (int i=0;i<NN-MM;i++) begin
         $display("data  y_nr_in [%0d]:%0d y_nr[%0d]:%0d", i,y_nr_in [i],i,y_nr[i]);
     end
     for (int i=NN-MM;i<NN;i++) begin
         $display("parity  y_nr [%0d]:%0d", i,y_nr [i]);
     end
     //if (~valid_cword)
     //     $fatal (0,"Please check encoder not a valid code word");
     //else
     //     $info ("is a valid code word");

       $display ("error bit [%0d]:%0d error_cnt:%0d", 0, 0,error_count);
       y_nr_w_err[0] = y_nr[0] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 1, 0,error_count);
       y_nr_w_err[1] = y_nr[1] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 2, 0,error_count);
       y_nr_w_err[2] = y_nr[2] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 3, 0,error_count);
       y_nr_w_err[3] = y_nr[3] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 4, 0,error_count);
       y_nr_w_err[4] = y_nr[4] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 5, 0,error_count);
       y_nr_w_err[5] = y_nr[5] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 6, 0,error_count);
       y_nr_w_err[6] = y_nr[6] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 7, 0,error_count);
       y_nr_w_err[7] = y_nr[7] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 8, 0,error_count);
       y_nr_w_err[8] = y_nr[8] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 9, 0,error_count);
       y_nr_w_err[9] = y_nr[9] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 10, 0,error_count);
       y_nr_w_err[10] = y_nr[10] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 11, 0,error_count);
       y_nr_w_err[11] = y_nr[11] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 12, 0,error_count);
       y_nr_w_err[12] = y_nr[12] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 13, 0,error_count);
       y_nr_w_err[13] = y_nr[13] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 14, 0,error_count);
       y_nr_w_err[14] = y_nr[14] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 15, 0,error_count);
       y_nr_w_err[15] = y_nr[15] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 16, 0,error_count);
       y_nr_w_err[16] = y_nr[16] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 17, 0,error_count);
       y_nr_w_err[17] = y_nr[17] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 18, 0,error_count);
       y_nr_w_err[18] = y_nr[18] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 19, 0,error_count);
       y_nr_w_err[19] = y_nr[19] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 20, 0,error_count);
       y_nr_w_err[20] = y_nr[20] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 21, 0,error_count);
       y_nr_w_err[21] = y_nr[21] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 22, 0,error_count);
       y_nr_w_err[22] = y_nr[22] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 23, 0,error_count);
       y_nr_w_err[23] = y_nr[23] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 24, 0,error_count);
       y_nr_w_err[24] = y_nr[24] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 25, 0,error_count);
       y_nr_w_err[25] = y_nr[25] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 26, 0,error_count);
       y_nr_w_err[26] = y_nr[26] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 27, 0,error_count);
       y_nr_w_err[27] = y_nr[27] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 28, 0,error_count);
       y_nr_w_err[28] = y_nr[28] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 29, 0,error_count);
       y_nr_w_err[29] = y_nr[29] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 30, 0,error_count);
       y_nr_w_err[30] = y_nr[30] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 31, 0,error_count);
       y_nr_w_err[31] = y_nr[31] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 32, 0,error_count);
       y_nr_w_err[32] = y_nr[32] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 33, 0,error_count);
       y_nr_w_err[33] = y_nr[33] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 34, 0,error_count);
       y_nr_w_err[34] = y_nr[34] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 35, 0,error_count);
       y_nr_w_err[35] = y_nr[35] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 36, 0,error_count);
       y_nr_w_err[36] = y_nr[36] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 37, 0,error_count);
       y_nr_w_err[37] = y_nr[37] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 38, 0,error_count);
       y_nr_w_err[38] = y_nr[38] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 39, 0,error_count);
       y_nr_w_err[39] = y_nr[39] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 40, 0,error_count);
       y_nr_w_err[40] = y_nr[40] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 41, 0,error_count);
       y_nr_w_err[41] = y_nr[41] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 42, 0,error_count);
       y_nr_w_err[42] = y_nr[42] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 43, 0,error_count);
       y_nr_w_err[43] = y_nr[43] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 44, 0,error_count);
       y_nr_w_err[44] = y_nr[44] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 45, 0,error_count);
       y_nr_w_err[45] = y_nr[45] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 46, 0,error_count);
       y_nr_w_err[46] = y_nr[46] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 47, 0,error_count);
       y_nr_w_err[47] = y_nr[47] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 48, 0,error_count);
       y_nr_w_err[48] = y_nr[48] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 49, 0,error_count);
       y_nr_w_err[49] = y_nr[49] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 50, 0,error_count);
       y_nr_w_err[50] = y_nr[50] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 51, 0,error_count);
       y_nr_w_err[51] = y_nr[51] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 52, 0,error_count);
       y_nr_w_err[52] = y_nr[52] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 53, 1,error_count);
       y_nr_w_err[53] = y_nr[53] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 54, 0,error_count);
       y_nr_w_err[54] = y_nr[54] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 55, 0,error_count);
       y_nr_w_err[55] = y_nr[55] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 56, 0,error_count);
       y_nr_w_err[56] = y_nr[56] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 57, 0,error_count);
       y_nr_w_err[57] = y_nr[57] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 58, 0,error_count);
       y_nr_w_err[58] = y_nr[58] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 59, 0,error_count);
       y_nr_w_err[59] = y_nr[59] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 60, 0,error_count);
       y_nr_w_err[60] = y_nr[60] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 61, 0,error_count);
       y_nr_w_err[61] = y_nr[61] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 62, 0,error_count);
       y_nr_w_err[62] = y_nr[62] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 63, 0,error_count);
       y_nr_w_err[63] = y_nr[63] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 64, 0,error_count);
       y_nr_w_err[64] = y_nr[64] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 65, 0,error_count);
       y_nr_w_err[65] = y_nr[65] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 66, 0,error_count);
       y_nr_w_err[66] = y_nr[66] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 67, 0,error_count);
       y_nr_w_err[67] = y_nr[67] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 68, 0,error_count);
       y_nr_w_err[68] = y_nr[68] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 69, 0,error_count);
       y_nr_w_err[69] = y_nr[69] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 70, 0,error_count);
       y_nr_w_err[70] = y_nr[70] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 71, 0,error_count);
       y_nr_w_err[71] = y_nr[71] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 72, 1,error_count);
       y_nr_w_err[72] = y_nr[72] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 73, 1,error_count);
       y_nr_w_err[73] = y_nr[73] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 74, 0,error_count);
       y_nr_w_err[74] = y_nr[74] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 75, 0,error_count);
       y_nr_w_err[75] = y_nr[75] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 76, 0,error_count);
       y_nr_w_err[76] = y_nr[76] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 77, 0,error_count);
       y_nr_w_err[77] = y_nr[77] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 78, 0,error_count);
       y_nr_w_err[78] = y_nr[78] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 79, 0,error_count);
       y_nr_w_err[79] = y_nr[79] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 80, 0,error_count);
       y_nr_w_err[80] = y_nr[80] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 81, 0,error_count);
       y_nr_w_err[81] = y_nr[81] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 82, 0,error_count);
       y_nr_w_err[82] = y_nr[82] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 83, 0,error_count);
       y_nr_w_err[83] = y_nr[83] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 84, 0,error_count);
       y_nr_w_err[84] = y_nr[84] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 85, 0,error_count);
       y_nr_w_err[85] = y_nr[85] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 86, 0,error_count);
       y_nr_w_err[86] = y_nr[86] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 87, 0,error_count);
       y_nr_w_err[87] = y_nr[87] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 88, 0,error_count);
       y_nr_w_err[88] = y_nr[88] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 89, 0,error_count);
       y_nr_w_err[89] = y_nr[89] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 90, 0,error_count);
       y_nr_w_err[90] = y_nr[90] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 91, 0,error_count);
       y_nr_w_err[91] = y_nr[91] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 92, 0,error_count);
       y_nr_w_err[92] = y_nr[92] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 93, 0,error_count);
       y_nr_w_err[93] = y_nr[93] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 94, 0,error_count);
       y_nr_w_err[94] = y_nr[94] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 95, 0,error_count);
       y_nr_w_err[95] = y_nr[95] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 96, 0,error_count);
       y_nr_w_err[96] = y_nr[96] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 97, 0,error_count);
       y_nr_w_err[97] = y_nr[97] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 98, 1,error_count);
       y_nr_w_err[98] = y_nr[98] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 99, 0,error_count);
       y_nr_w_err[99] = y_nr[99] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 100, 0,error_count);
       y_nr_w_err[100] = y_nr[100] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 101, 0,error_count);
       y_nr_w_err[101] = y_nr[101] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 102, 0,error_count);
       y_nr_w_err[102] = y_nr[102] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 103, 0,error_count);
       y_nr_w_err[103] = y_nr[103] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 104, 0,error_count);
       y_nr_w_err[104] = y_nr[104] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 105, 0,error_count);
       y_nr_w_err[105] = y_nr[105] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 106, 0,error_count);
       y_nr_w_err[106] = y_nr[106] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 107, 0,error_count);
       y_nr_w_err[107] = y_nr[107] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 108, 0,error_count);
       y_nr_w_err[108] = y_nr[108] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 109, 0,error_count);
       y_nr_w_err[109] = y_nr[109] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 110, 0,error_count);
       y_nr_w_err[110] = y_nr[110] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 111, 0,error_count);
       y_nr_w_err[111] = y_nr[111] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 112, 0,error_count);
       y_nr_w_err[112] = y_nr[112] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 113, 0,error_count);
       y_nr_w_err[113] = y_nr[113] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 114, 0,error_count);
       y_nr_w_err[114] = y_nr[114] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 115, 0,error_count);
       y_nr_w_err[115] = y_nr[115] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 116, 0,error_count);
       y_nr_w_err[116] = y_nr[116] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 117, 0,error_count);
       y_nr_w_err[117] = y_nr[117] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 118, 1,error_count);
       y_nr_w_err[118] = y_nr[118] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 119, 1,error_count);
       y_nr_w_err[119] = y_nr[119] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 120, 0,error_count);
       y_nr_w_err[120] = y_nr[120] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 121, 0,error_count);
       y_nr_w_err[121] = y_nr[121] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 122, 0,error_count);
       y_nr_w_err[122] = y_nr[122] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 123, 0,error_count);
       y_nr_w_err[123] = y_nr[123] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 124, 0,error_count);
       y_nr_w_err[124] = y_nr[124] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 125, 0,error_count);
       y_nr_w_err[125] = y_nr[125] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 126, 0,error_count);
       y_nr_w_err[126] = y_nr[126] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 127, 0,error_count);
       y_nr_w_err[127] = y_nr[127] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 128, 0,error_count);
       y_nr_w_err[128] = y_nr[128] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 129, 0,error_count);
       y_nr_w_err[129] = y_nr[129] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 130, 0,error_count);
       y_nr_w_err[130] = y_nr[130] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 131, 1,error_count);
       y_nr_w_err[131] = y_nr[131] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 132, 0,error_count);
       y_nr_w_err[132] = y_nr[132] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 133, 0,error_count);
       y_nr_w_err[133] = y_nr[133] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 134, 0,error_count);
       y_nr_w_err[134] = y_nr[134] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 135, 0,error_count);
       y_nr_w_err[135] = y_nr[135] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 136, 0,error_count);
       y_nr_w_err[136] = y_nr[136] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 137, 0,error_count);
       y_nr_w_err[137] = y_nr[137] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 138, 0,error_count);
       y_nr_w_err[138] = y_nr[138] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 139, 0,error_count);
       y_nr_w_err[139] = y_nr[139] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 140, 1,error_count);
       y_nr_w_err[140] = y_nr[140] ^ 1; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 141, 0,error_count);
       y_nr_w_err[141] = y_nr[141] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 142, 0,error_count);
       y_nr_w_err[142] = y_nr[142] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 143, 0,error_count);
       y_nr_w_err[143] = y_nr[143] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 144, 0,error_count);
       y_nr_w_err[144] = y_nr[144] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 145, 0,error_count);
       y_nr_w_err[145] = y_nr[145] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 146, 0,error_count);
       y_nr_w_err[146] = y_nr[146] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 147, 0,error_count);
       y_nr_w_err[147] = y_nr[147] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 148, 0,error_count);
       y_nr_w_err[148] = y_nr[148] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 149, 0,error_count);
       y_nr_w_err[149] = y_nr[149] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 150, 0,error_count);
       y_nr_w_err[150] = y_nr[150] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 151, 0,error_count);
       y_nr_w_err[151] = y_nr[151] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 152, 0,error_count);
       y_nr_w_err[152] = y_nr[152] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 153, 0,error_count);
       y_nr_w_err[153] = y_nr[153] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 154, 0,error_count);
       y_nr_w_err[154] = y_nr[154] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 155, 0,error_count);
       y_nr_w_err[155] = y_nr[155] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 156, 0,error_count);
       y_nr_w_err[156] = y_nr[156] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 157, 0,error_count);
       y_nr_w_err[157] = y_nr[157] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 158, 0,error_count);
       y_nr_w_err[158] = y_nr[158] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 159, 0,error_count);
       y_nr_w_err[159] = y_nr[159] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 160, 0,error_count);
       y_nr_w_err[160] = y_nr[160] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 161, 0,error_count);
       y_nr_w_err[161] = y_nr[161] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 162, 0,error_count);
       y_nr_w_err[162] = y_nr[162] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 163, 0,error_count);
       y_nr_w_err[163] = y_nr[163] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 164, 0,error_count);
       y_nr_w_err[164] = y_nr[164] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 165, 0,error_count);
       y_nr_w_err[165] = y_nr[165] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 166, 0,error_count);
       y_nr_w_err[166] = y_nr[166] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 167, 0,error_count);
       y_nr_w_err[167] = y_nr[167] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 168, 0,error_count);
       y_nr_w_err[168] = y_nr[168] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 169, 0,error_count);
       y_nr_w_err[169] = y_nr[169] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 170, 0,error_count);
       y_nr_w_err[170] = y_nr[170] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 171, 0,error_count);
       y_nr_w_err[171] = y_nr[171] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 172, 0,error_count);
       y_nr_w_err[172] = y_nr[172] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 173, 0,error_count);
       y_nr_w_err[173] = y_nr[173] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 174, 0,error_count);
       y_nr_w_err[174] = y_nr[174] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 175, 0,error_count);
       y_nr_w_err[175] = y_nr[175] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 176, 0,error_count);
       y_nr_w_err[176] = y_nr[176] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 177, 0,error_count);
       y_nr_w_err[177] = y_nr[177] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 178, 0,error_count);
       y_nr_w_err[178] = y_nr[178] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 179, 0,error_count);
       y_nr_w_err[179] = y_nr[179] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 180, 0,error_count);
       y_nr_w_err[180] = y_nr[180] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 181, 0,error_count);
       y_nr_w_err[181] = y_nr[181] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 182, 0,error_count);
       y_nr_w_err[182] = y_nr[182] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 183, 0,error_count);
       y_nr_w_err[183] = y_nr[183] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 184, 0,error_count);
       y_nr_w_err[184] = y_nr[184] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 185, 0,error_count);
       y_nr_w_err[185] = y_nr[185] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 186, 0,error_count);
       y_nr_w_err[186] = y_nr[186] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 187, 0,error_count);
       y_nr_w_err[187] = y_nr[187] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 188, 0,error_count);
       y_nr_w_err[188] = y_nr[188] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 189, 0,error_count);
       y_nr_w_err[189] = y_nr[189] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 190, 0,error_count);
       y_nr_w_err[190] = y_nr[190] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 191, 0,error_count);
       y_nr_w_err[191] = y_nr[191] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 192, 0,error_count);
       y_nr_w_err[192] = y_nr[192] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 193, 0,error_count);
       y_nr_w_err[193] = y_nr[193] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 194, 0,error_count);
       y_nr_w_err[194] = y_nr[194] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 195, 0,error_count);
       y_nr_w_err[195] = y_nr[195] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 196, 0,error_count);
       y_nr_w_err[196] = y_nr[196] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 197, 0,error_count);
       y_nr_w_err[197] = y_nr[197] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 198, 0,error_count);
       y_nr_w_err[198] = y_nr[198] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 199, 0,error_count);
       y_nr_w_err[199] = y_nr[199] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 200, 0,error_count);
       y_nr_w_err[200] = y_nr[200] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 201, 0,error_count);
       y_nr_w_err[201] = y_nr[201] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 202, 0,error_count);
       y_nr_w_err[202] = y_nr[202] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 203, 0,error_count);
       y_nr_w_err[203] = y_nr[203] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 204, 0,error_count);
       y_nr_w_err[204] = y_nr[204] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 205, 0,error_count);
       y_nr_w_err[205] = y_nr[205] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 206, 0,error_count);
       y_nr_w_err[206] = y_nr[206] ^ 0; //error cword
       error_count++;
       $display ("error bit [%0d]:%0d error_cnt:%0d", 207, 0,error_count);
       y_nr_w_err[207] = y_nr[207] ^ 0; //error cword
       error_count++;
         tmp_bit[0] = 1;
         tmp_bit[1] = 0;
         tmp_bit[2] = 1;
         tmp_bit[3] = 1;
         tmp_bit[4] = 1;
         tmp_bit[5] = 1;
         tmp_bit[6] = 0;
         tmp_bit[7] = 0;
         tmp_bit[8] = 1;
         tmp_bit[9] = 1;
         tmp_bit[10] = 0;
         tmp_bit[11] = 1;
         tmp_bit[12] = 0;
         tmp_bit[13] = 1;
         tmp_bit[14] = 1;
         tmp_bit[15] = 0;
         tmp_bit[16] = 0;
         tmp_bit[17] = 0;
         tmp_bit[18] = 0;
         tmp_bit[19] = 0;
         tmp_bit[20] = 1;
         tmp_bit[21] = 0;
         tmp_bit[22] = 1;
         tmp_bit[23] = 1;
         tmp_bit[24] = 0;
         tmp_bit[25] = 0;
         tmp_bit[26] = 0;
         tmp_bit[27] = 1;
         tmp_bit[28] = 1;
         tmp_bit[29] = 1;
         tmp_bit[30] = 1;
         tmp_bit[31] = 0;
         tmp_bit[32] = 0;
         tmp_bit[33] = 0;
         tmp_bit[34] = 1;
         tmp_bit[35] = 1;
         tmp_bit[36] = 1;
         tmp_bit[37] = 0;
         tmp_bit[38] = 1;
         tmp_bit[39] = 0;
         tmp_bit[40] = 0;
         tmp_bit[41] = 0;
         tmp_bit[42] = 1;
         tmp_bit[43] = 1;
         tmp_bit[44] = 1;
         tmp_bit[45] = 1;
         tmp_bit[46] = 1;
         tmp_bit[47] = 0;
         tmp_bit[48] = 1;
         tmp_bit[49] = 1;
         tmp_bit[50] = 1;
         tmp_bit[51] = 0;
         tmp_bit[52] = 1;
         tmp_bit[53] = 0;
         tmp_bit[54] = 0;
         tmp_bit[55] = 0;
         tmp_bit[56] = 1;
         tmp_bit[57] = 0;
         tmp_bit[58] = 0;
         tmp_bit[59] = 1;
         tmp_bit[60] = 1;
         tmp_bit[61] = 0;
         tmp_bit[62] = 1;
         tmp_bit[63] = 0;
         tmp_bit[64] = 1;
         tmp_bit[65] = 0;
         tmp_bit[66] = 1;
         tmp_bit[67] = 0;
         tmp_bit[68] = 0;
         tmp_bit[69] = 0;
         tmp_bit[70] = 0;
         tmp_bit[71] = 1;
         tmp_bit[72] = 1;
         tmp_bit[73] = 0;
         tmp_bit[74] = 1;
         tmp_bit[75] = 0;
         tmp_bit[76] = 0;
         tmp_bit[77] = 0;
         tmp_bit[78] = 0;
         tmp_bit[79] = 1;
         tmp_bit[80] = 1;
         tmp_bit[81] = 0;
         tmp_bit[82] = 0;
         tmp_bit[83] = 0;
         tmp_bit[84] = 0;
         tmp_bit[85] = 1;
         tmp_bit[86] = 0;
         tmp_bit[87] = 1;
         tmp_bit[88] = 1;
         tmp_bit[89] = 1;
         tmp_bit[90] = 1;
         tmp_bit[91] = 0;
         tmp_bit[92] = 0;
         tmp_bit[93] = 0;
         tmp_bit[94] = 0;
         tmp_bit[95] = 1;
         tmp_bit[96] = 1;
         tmp_bit[97] = 1;
         tmp_bit[98] = 0;
         tmp_bit[99] = 1;
         tmp_bit[100] = 1;
         tmp_bit[101] = 0;
         tmp_bit[102] = 0;
         tmp_bit[103] = 1;
         tmp_bit[104] = 1;
         tmp_bit[105] = 0;
         tmp_bit[106] = 0;
         tmp_bit[107] = 1;
         tmp_bit[108] = 1;
         tmp_bit[109] = 1;
         tmp_bit[110] = 0;
         tmp_bit[111] = 1;
         tmp_bit[112] = 0;
         tmp_bit[113] = 1;
         tmp_bit[114] = 0;
         tmp_bit[115] = 0;
         tmp_bit[116] = 0;
         tmp_bit[117] = 1;
         tmp_bit[118] = 0;
         tmp_bit[119] = 0;
         tmp_bit[120] = 1;
         tmp_bit[121] = 1;
         tmp_bit[122] = 1;
         tmp_bit[123] = 0;
         tmp_bit[124] = 0;
         tmp_bit[125] = 1;
         tmp_bit[126] = 0;
         tmp_bit[127] = 0;
         tmp_bit[128] = 1;
         tmp_bit[129] = 1;
         tmp_bit[130] = 0;
         tmp_bit[131] = 0;
         tmp_bit[132] = 0;
         tmp_bit[133] = 0;
         tmp_bit[134] = 0;
         tmp_bit[135] = 0;
         tmp_bit[136] = 0;
         tmp_bit[137] = 1;
         tmp_bit[138] = 1;
         tmp_bit[139] = 1;
         tmp_bit[140] = 1;
         tmp_bit[141] = 0;
         tmp_bit[142] = 0;
         tmp_bit[143] = 0;
         tmp_bit[144] = 0;
         tmp_bit[145] = 0;
         tmp_bit[146] = 0;
         tmp_bit[147] = 1;
         tmp_bit[148] = 0;
         tmp_bit[149] = 0;
         tmp_bit[150] = 1;
         tmp_bit[151] = 1;
         tmp_bit[152] = 0;
         tmp_bit[153] = 1;
         tmp_bit[154] = 0;
         tmp_bit[155] = 1;
         tmp_bit[156] = 1;
         tmp_bit[157] = 1;
         tmp_bit[158] = 1;
         tmp_bit[159] = 0;
         tmp_bit[160] = 0;
         tmp_bit[161] = 0;
         tmp_bit[162] = 1;
         tmp_bit[163] = 0;
         tmp_bit[164] = 1;
         tmp_bit[165] = 0;
         tmp_bit[166] = 1;
         tmp_bit[167] = 0;
         tmp_bit[168] = 1;
         tmp_bit[169] = 1;
         tmp_bit[170] = 1;
         tmp_bit[171] = 0;
         tmp_bit[172] = 1;
         tmp_bit[173] = 0;
         tmp_bit[174] = 1;
         tmp_bit[175] = 0;
         tmp_bit[176] = 1;
         tmp_bit[177] = 1;
         tmp_bit[178] = 0;
         tmp_bit[179] = 0;
         tmp_bit[180] = 0;
         tmp_bit[181] = 1;
         tmp_bit[182] = 0;
         tmp_bit[183] = 1;
         tmp_bit[184] = 0;
         tmp_bit[185] = 1;
         tmp_bit[186] = 1;
         tmp_bit[187] = 1;
         tmp_bit[188] = 1;
         tmp_bit[189] = 1;
         tmp_bit[190] = 1;
         tmp_bit[191] = 1;
         tmp_bit[192] = 0;
         tmp_bit[193] = 0;
         tmp_bit[194] = 1;
         tmp_bit[195] = 1;
         tmp_bit[196] = 1;
         tmp_bit[197] = 0;
         tmp_bit[198] = 0;
         tmp_bit[199] = 0;
         tmp_bit[200] = 1;
         tmp_bit[201] = 0;
         tmp_bit[202] = 0;
         tmp_bit[203] = 0;
         tmp_bit[204] = 0;
         tmp_bit[205] = 1;
         tmp_bit[206] = 0;
         tmp_bit[207] = 1;
     repeat (1) @ (posedge clk);
         syny = ~  syndrome[0] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 0, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 0, syny );
         end
         syny = ~  syndrome[1] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 1, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 1, syny );
         end
         syny = ~  syndrome[2] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 2, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 2, syny );
         end
         syny = ~  syndrome[3] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 3, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 3, syny );
         end
         syny = ~  syndrome[4] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 4, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 4, syny );
         end
         syny = ~  syndrome[5] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 5, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 5, syny );
         end
         syny = ~  syndrome[6] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 6, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 6, syny );
         end
         syny = ~  syndrome[7] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 7, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 7, syny );
         end
         syny = ~  syndrome[8] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 8, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 8, syny );
         end
         syny = ~  syndrome[9] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 9, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 9, syny );
         end
         syny = ~  syndrome[10] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 10, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 10, syny );
         end
         syny = ~  syndrome[11] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 11, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 11, syny );
         end
         syny = ~  syndrome[12] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 12, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 12, syny );
         end
         syny = ~  syndrome[13] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 13, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 13, syny );
         end
         syny = ~  syndrome[14] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 14, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 14, syny );
         end
         syny = ~  syndrome[15] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 15, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 15, syny );
         end
         syny = ~  syndrome[16] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 16, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 16, syny );
         end
         syny = ~  syndrome[17] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 17, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 17, syny );
         end
         syny = ~  syndrome[18] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 18, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 18, syny );
         end
         syny = ~  syndrome[19] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 19, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 19, syny );
         end
         syny = ~  syndrome[20] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 20, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 20, syny );
         end
         syny = ~  syndrome[21] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 21, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 21, syny );
         end
         syny = ~  syndrome[22] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 22, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 22, syny );
         end
         syny = ~  syndrome[23] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 23, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 23, syny );
         end
         syny = ~  syndrome[24] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 24, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 24, syny );
         end
         syny = ~  syndrome[25] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 25, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 25, syny );
         end
         syny = ~  syndrome[26] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 26, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 26, syny );
         end
         syny = ~  syndrome[27] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 27, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 27, syny );
         end
         syny = ~  syndrome[28] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 28, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 28, syny );
         end
         syny = ~  syndrome[29] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 29, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 29, syny );
         end
         syny = ~  syndrome[30] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 30, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 30, syny );
         end
         syny = ~  syndrome[31] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 31, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 31, syny );
         end
         syny = ~  syndrome[32] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 32, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 32, syny );
         end
         syny = ~  syndrome[33] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 33, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 33, syny );
         end
         syny = ~  syndrome[34] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 34, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 34, syny );
         end
         syny = ~  syndrome[35] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 35, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 35, syny );
         end
         syny = ~  syndrome[36] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 36, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 36, syny );
         end
         syny = ~  syndrome[37] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 37, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 37, syny );
         end
         syny = ~  syndrome[38] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 38, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 38, syny );
         end
         syny = ~  syndrome[39] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 39, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 39, syny );
         end
         syny = ~  syndrome[40] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 40, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 40, syny );
         end
         syny = ~  syndrome[41] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 41, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 41, syny );
         end
         syny = ~  syndrome[42] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 42, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 42, syny );
         end
         syny = ~  syndrome[43] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 43, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 43, syny );
         end
         syny = ~  syndrome[44] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 44, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 44, syny );
         end
         syny = ~  syndrome[45] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 45, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 45, syny );
         end
         syny = ~  syndrome[46] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 46, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 46, syny );
         end
         syny = ~  syndrome[47] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 47, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 47, syny );
         end
         syny = ~  syndrome[48] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 48, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 48, syny );
         end
         syny = ~  syndrome[49] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 49, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 49, syny );
         end
         syny = ~  syndrome[50] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 50, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 50, syny );
         end
         syny = ~  syndrome[51] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 51, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 51, syny );
         end
         syny = ~  syndrome[52] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 52, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 52, syny );
         end
         syny = ~  syndrome[53] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 53, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 53, syny );
         end
         syny = ~  syndrome[54] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 54, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 54, syny );
         end
         syny = ~  syndrome[55] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 55, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 55, syny );
         end
         syny = ~  syndrome[56] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 56, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 56, syny );
         end
         syny = ~  syndrome[57] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 57, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 57, syny );
         end
         syny = ~  syndrome[58] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 58, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 58, syny );
         end
         syny = ~  syndrome[59] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 59, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 59, syny );
         end
         syny = ~  syndrome[60] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 60, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 60, syny );
         end
         syny = ~  syndrome[61] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 61, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 61, syny );
         end
         syny = ~  syndrome[62] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 62, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 62, syny );
         end
         syny = ~  syndrome[63] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 63, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 63, syny );
         end
         syny = ~  syndrome[64] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 64, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 64, syny );
         end
         syny = ~  syndrome[65] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 65, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 65, syny );
         end
         syny = ~  syndrome[66] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 66, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 66, syny );
         end
         syny = ~  syndrome[67] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 67, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 67, syny );
         end
         syny = ~  syndrome[68] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 68, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 68, syny );
         end
         syny = ~  syndrome[69] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 69, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 69, syny );
         end
         syny = ~  syndrome[70] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 70, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 70, syny );
         end
         syny = ~  syndrome[71] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 71, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 71, syny );
         end
         syny = ~  syndrome[72] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 72, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 72, syny );
         end
         syny = ~  syndrome[73] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 73, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 73, syny );
         end
         syny = ~  syndrome[74] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 74, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 74, syny );
         end
         syny = ~  syndrome[75] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 75, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 75, syny );
         end
         syny = ~  syndrome[76] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 76, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 76, syny );
         end
         syny = ~  syndrome[77] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 77, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 77, syny );
         end
         syny = ~  syndrome[78] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 78, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 78, syny );
         end
         syny = ~  syndrome[79] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 79, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 79, syny );
         end
         syny = ~  syndrome[80] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 80, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 80, syny );
         end
         syny = ~  syndrome[81] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 81, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 81, syny );
         end
         syny = ~  syndrome[82] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 82, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 82, syny );
         end
         syny = ~  syndrome[83] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 83, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 83, syny );
         end
         syny = ~  syndrome[84] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 84, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 84, syny );
         end
         syny = ~  syndrome[85] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 85, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 85, syny );
         end
         syny = ~  syndrome[86] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 86, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 86, syny );
         end
         syny = ~  syndrome[87] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 87, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 87, syny );
         end
         syny = ~  syndrome[88] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 88, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 88, syny );
         end
         syny = ~  syndrome[89] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 89, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 89, syny );
         end
         syny = ~  syndrome[90] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 90, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 90, syny );
         end
         syny = ~  syndrome[91] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 91, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 91, syny );
         end
         syny = ~  syndrome[92] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 92, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 92, syny );
         end
         syny = ~  syndrome[93] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 93, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 93, syny );
         end
         syny = ~  syndrome[94] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 94, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 94, syny );
         end
         syny = ~  syndrome[95] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 95, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 95, syny );
         end
         syny = ~  syndrome[96] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 96, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 96, syny );
         end
         syny = ~  syndrome[97] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 97, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 97, syny );
         end
         syny = ~  syndrome[98] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 98, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 98, syny );
         end
         syny = ~  syndrome[99] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 99, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 99, syny );
         end
         syny = ~  syndrome[100] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 100, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 100, syny );
         end
         syny = ~  syndrome[101] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 101, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 101, syny );
         end
         syny = ~  syndrome[102] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 102, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 102, syny );
         end
         syny = ~  syndrome[103] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 103, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 103, syny );
         end
         syny = ~  syndrome[104] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 104, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 104, syny );
         end
         syny = ~  syndrome[105] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 105, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 105, syny );
         end
         syny = ~  syndrome[106] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 106, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 106, syny );
         end
         syny = ~  syndrome[107] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 107, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 107, syny );
         end
         syny = ~  syndrome[108] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 108, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 108, syny );
         end
         syny = ~  syndrome[109] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 109, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 109, syny );
         end
         syny = ~  syndrome[110] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 110, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 110, syny );
         end
         syny = ~  syndrome[111] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 111, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 111, syny );
         end
         syny = ~  syndrome[112] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 112, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 112, syny );
         end
         syny = ~  syndrome[113] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 113, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 113, syny );
         end
         syny = ~  syndrome[114] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 114, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 114, syny );
         end
         syny = ~  syndrome[115] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 115, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 115, syny );
         end
         syny = ~  syndrome[116] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 116, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 116, syny );
         end
         syny = ~  syndrome[117] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 117, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 117, syny );
         end
         syny = ~  syndrome[118] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 118, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 118, syny );
         end
         syny = ~  syndrome[119] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 119, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 119, syny );
         end
         syny = ~  syndrome[120] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 120, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 120, syny );
         end
         syny = ~  syndrome[121] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 121, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 121, syny );
         end
         syny = ~  syndrome[122] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 122, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 122, syny );
         end
         syny = ~  syndrome[123] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 123, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 123, syny );
         end
         syny = ~  syndrome[124] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 124, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 124, syny );
         end
         syny = ~  syndrome[125] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 125, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 125, syny );
         end
         syny = ~  syndrome[126] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 126, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 126, syny );
         end
         syny = ~  syndrome[127] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 127, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 127, syny );
         end
         syny = ~  syndrome[128] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 128, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 128, syny );
         end
         syny = ~  syndrome[129] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 129, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 129, syny );
         end
         syny = ~  syndrome[130] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 130, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 130, syny );
         end
         syny = ~  syndrome[131] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 131, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 131, syny );
         end
         syny = ~  syndrome[132] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 132, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 132, syny );
         end
         syny = ~  syndrome[133] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 133, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 133, syny );
         end
         syny = ~  syndrome[134] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 134, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 134, syny );
         end
         syny = ~  syndrome[135] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 135, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 135, syny );
         end
         syny = ~  syndrome[136] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 136, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 136, syny );
         end
         syny = ~  syndrome[137] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 137, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 137, syny );
         end
         syny = ~  syndrome[138] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 138, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 138, syny );
         end
         syny = ~  syndrome[139] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 139, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 139, syny );
         end
         syny = ~  syndrome[140] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 140, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 140, syny );
         end
         syny = ~  syndrome[141] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 141, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 141, syny );
         end
         syny = ~  syndrome[142] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 142, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 142, syny );
         end
         syny = ~  syndrome[143] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 143, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 143, syny );
         end
         syny = ~  syndrome[144] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 144, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 144, syny );
         end
         syny = ~  syndrome[145] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 145, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 145, syny );
         end
         syny = ~  syndrome[146] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 146, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 146, syny );
         end
         syny = ~  syndrome[147] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 147, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 147, syny );
         end
         syny = ~  syndrome[148] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 148, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 148, syny );
         end
         syny = ~  syndrome[149] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 149, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 149, syny );
         end
         syny = ~  syndrome[150] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 150, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 150, syny );
         end
         syny = ~  syndrome[151] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 151, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 151, syny );
         end
         syny = ~  syndrome[152] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 152, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 152, syny );
         end
         syny = ~  syndrome[153] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 153, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 153, syny );
         end
         syny = ~  syndrome[154] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 154, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 154, syny );
         end
         syny = ~  syndrome[155] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 155, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 155, syny );
         end
         syny = ~  syndrome[156] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 156, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 156, syny );
         end
         syny = ~  syndrome[157] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 157, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 157, syny );
         end
         syny = ~  syndrome[158] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 158, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 158, syny );
         end
         syny = ~  syndrome[159] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 159, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 159, syny );
         end
         syny = ~  syndrome[160] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 160, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 160, syny );
         end
         syny = ~  syndrome[161] ;
         if ( 1 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 161, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",1, 161, syny );
         end
         syny = ~  syndrome[162] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 162, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 162, syny );
         end
         syny = ~  syndrome[163] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 163, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 163, syny );
         end
         syny = ~  syndrome[164] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 164, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 164, syny );
         end
         syny = ~  syndrome[165] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 165, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 165, syny );
         end
         syny = ~  syndrome[166] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 166, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 166, syny );
         end
         syny = ~  syndrome[167] ;
         if ( 0 == syny ) begin
              $display ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 167, syny );
         end else begin
              $error   ("syndrome syny_err:%0d syndrome[%0d]:%0d",0, 167, syny );
         end
     repeat (1) @ (posedge clk);
     $finish;

     for (int i=0;i<NN;i++) begin
            if (y_nr_w_err[i]) begin
                 q0  [i] <= 2'b11;  // BPSK 1: -1 === 2'b11
                                    // value of 1 means -1 in BPSK which is 2'b11
            end else begin
                 q0  [i] <= 2'b01;  // BPSK 0: 1  === 2'b01
                                    // value of 0 means 1 in BPSK which is 2'b01
            end
     end
     for (int i=0;i<MM;i++) begin
         exp_syn [i] <= 1'b1;
     end

  end




  repeat (4) @ (posedge clk);
  start                          <= 1'b1;
  repeat (1) @ (posedge clk);
  start                          <= 1'b0;
  repeat (20) @(posedge clk);
  $display("LDPC_TB:finsh called timeout :%0d %t", timeoutfec, $time);
  repeat (20) @(posedge clk);
  $finish();
end


assign percent_probability_int = 32'd 206;

initial
begin
`ifdef IVERILOG
          $dumpfile("sntc_ldpc_syndrome_tb.vcd");
          $dumpvars(0, sntc_ldpc_syndrome_tb);
`endif
  repeat (600) @(posedge clk);
end

initial
begin
  forever begin
      if (converged[1]) begin
         $display("convergence end reached");
         if (converged[0]) begin
            $display("PASSED: Did converge");
         end else begin
            $error("FAILED: Did not converge");
         end
         $finish();
      end
      repeat (1) @(posedge clk);
  end
end

`endif




`ifdef ENCRYPT
`endif

endmodule

//C DBG: bsc p:0.100000 probability:2.197225 percent_probability_int:'d141

 //GF Syndrome valid code word
//y_int:
 //a11cfea357547ac81e032722b99b87a1858559177c5c78d06b3d
//syny_err:
 //0200400200100008100880c0000680200320002200
//C DBG: bsc p:0.038462 probability:3.218876 percent_probability_int:'d206
